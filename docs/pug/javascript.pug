
extends javascript/components

block variables
  - var pageID = 'javascript'
  - var pageTitle = 'JavaScript Components'
  - var prism = true

block article
  h3.ui-header-primary Overview
  p We use 
    code.ui-color-emphasis schema
    |  as the JavaScript namespace and 
    code.ui-color-emphasis data-schema-*
    |  for data attributes.
  .ui-frame-rounded
    .ui-form-fluid.ui-skip-medium
      input(type='text' placeholder='Please input something...' data-schema-model='message' data-schema-value='Hello world!' data-schema-adapter='escape' data-schema-trigger='keyup')
    .ui-skip-medium
      .ui-content-alert(data-schema-view='message' data-schema-controller='encrypt')
        p Message: #[strong ${message}]
        p Encrypt: 
          span(data-schema-view='icons' data-schema-iteration='icon of icons')
            i(data-schema-icon='${icon}')
        p Count: #[code ${count}]
    div
      pre: code.language-markup.
        &lt;input type="text" placeholder="Please input something..." data-schema-model="message" data-schema-value="Hello world!" data-schema-adapter="escape" data-schema-trigger="keyup"&gt;
        &lt;div class="ui-content-alert" data-schema-view="message" data-schema-controller="encrypt"&gt;
          &lt;p&gt;Message: &lt;strong&gt;${message}&lt;/strong&gt;&lt;/p&gt;
          &lt;p&gt;Encrypt: &lt;span data-schema-view="icons" data-schema-iteration="icon of icons"&gt;&lt;i data-schema-icon="${icon}"&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
          &lt;p&gt;Count: &lt;code&gt;${count}&lt;/code&gt;&lt;/p&gt;
        &lt;/div&gt;
      pre: code.language-markup.
        &lt;script&gt;
          schema.escape = function (message) {
            return message.replace(/\&lt;/g, '&amp;lt;').replace(/\&gt;/g, '&amp;gt;');
          };

          schema.encrypt = function (models) {
            var message = models.message || '';
            var emoji = {
              'A': 'angry',
              'B': 'baffled',
              'C': 'confused',
              'D': 'sad',
              'E': 'evil',
              'F': 'frustrated',
              'G': 'grin',
              'H': 'happy',
              'I': 'hipster',
              'J': 'cool',
              'K': 'wink',
              'L': 'sleepy',
              'M': 'smile',
              'N': 'neutral',
              'O': 'confused',
              'P': 'happy',
              'Q': 'cool',
              'R': 'crying',
              'S': 'sad',
              'T': 'tongue',
              'U': 'frustrated',
              'V': 'evil',
              'W': 'wink',
              'X': 'shocked',
              'Y': 'crying',
              'Z': 'shocked'
            };
            var icons = message.split('').map(function (char) {
              if (/[A-Z]/.test(char)) {
                return emoji[char];
              }
              if (/[a-z]/.test(char)) {
                return emoji[char.toUpperCase()] + '-o';
              }
              return char.charCodeAt(0) &lt; 128 ? 'wondering' : 'wondering-o';
            });
            return {
              icons: icons,
              count: message.length
            };
          };
        &lt;/script&gt;

block append foot
  script(src=appIcons + '/emoji.js')
  script.
    schema.escape = function (message) {
      return message.replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
    };

    schema.encrypt = function (models) {
      var message = models.message || '';
      var emoji = {
        'A': 'angry',
        'B': 'baffled',
        'C': 'confused',
        'D': 'sad',
        'E': 'evil',
        'F': 'frustrated',
        'G': 'grin',
        'H': 'happy',
        'I': 'hipster',
        'J': 'cool',
        'K': 'wink',
        'L': 'sleepy',
        'M': 'smile',
        'N': 'neutral',
        'O': 'confused',
        'P': 'happy',
        'Q': 'cool',
        'R': 'crying',
        'S': 'sad',
        'T': 'tongue',
        'U': 'frustrated',
        'V': 'evil',
        'W': 'wink',
        'X': 'shocked',
        'Y': 'crying',
        'Z': 'shocked'
      };
      var icons = message.split('').map(function (char) {
        if (/[A-Z]/.test(char)) {
          return emoji[char];
        }
        if (/[a-z]/.test(char)) {
          return emoji[char.toUpperCase()] + '-o';
        }
        return char.charCodeAt(0) < 128 ? 'wondering' : 'wondering-o';
      });
      return {
        icons: icons,
        count: message.length
      };
    };
